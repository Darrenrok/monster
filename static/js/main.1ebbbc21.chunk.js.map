{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.coponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","Cardlist","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAEaA,EAAM,SAACC,GAAD,OAEnB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAElB,6BAAKL,EAAMI,QAAQE,WCJVC,G,MAAW,SAAAP,GAAK,OAE7B,qBAAKC,UAAU,YAAf,SACCD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OACvB,cAAC,EAAD,CAAsBA,QAASA,GAApBA,EAAQC,WCJVK,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACpB,uBACAX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCCG,G,wDArCf,aAAc,IAAD,8BACX,gBACKC,MAAM,CACPR,SAAS,GACTS,YAAY,IAJL,E,qDAQX,WAAqB,IAAD,OAErBC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,S,oBAK1C,WAAS,IAAD,OACR,EAAkCE,KAAKR,MAA9BR,EAAT,EAASA,SAASS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAtB,GAAO,OAC9CA,EAAQE,KAAKqB,cAAcC,SAASX,EAAYU,kBAGhD,OACE,sBAAK1B,UAAU,MAAf,UACG,kDACF,cAAC,EAAD,CACAU,YAAY,kBACZC,aAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUvB,SAAUiB,W,GA/BJO,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1ebbbc21.chunk.js","sourcesContent":["import react from \"react\";\r\nimport './card.styles.css';\r\nexport const Card =(props) =>(\r\n\r\n<div className='card-container'>\r\n<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n\r\n    <h1>{props.monster.name}</h1>\r\n</div>\r\n\r\n);\r\n\r\n/*Just a quick note to remember to use the back tick  ` and NOT regular single or double quotes (' and \") for string interpolation on our image src. This is an easy mistake to make as you cannot interpolate the strings when using regular quotes, you must use back ticks!*/","import react from \"react\";\r\nimport{ Card } from '../card/card.component'\r\nimport './card-list.styles.css'\r\nexport const Cardlist = props => (\r\n    \r\n<div className='card-list'>\r\n{props.monsters.map(monster => (\r\n    <Card key={monster.id}monster={monster}/>\r\n))}\r\n</div>\r\n);\r\n    /* react verables all start with a capital leter eg. const Card-list*/","import react from \"react\";\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox =({ placeholder , handleChange }) => (\r\n    <input  \r\n    className='search'\r\n    type='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n      \r\n      \r\n      />\r\n\r\n);\r\n","import { Component } from 'react';\nimport { Cardlist } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.coponent';\nimport './App.css';\n\nclass App extends Component{\nconstructor(){\n  super();\n  this.state={\n      monsters:[],\n      searchField:''\n};\n  }\n\n  componentDidMount() {\n\t\n\tfetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({monsters: users}))\n\t\n}\n\n\nrender(){\nconst  { monsters,searchField } = this.state\nconst filteredMonsters = monsters.filter(monster =>\n  monster.name.toLowerCase().includes(searchField.toLowerCase())\n  )\n\n  return (\n    <div className=\"App\">\n       <h1>Monsters Rolodex</h1>\n     <SearchBox\n     placeholder='search monsters'\n     handleChange={ e => this.setState({searchField: e.target.value })}\n     />\n  <Cardlist monsters={filteredMonsters}/>\n\n      \n    </div>\n);\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}